basePath: /v1
definitions:
  groups.createResponse:
    properties:
      group:
        $ref: '#/definitions/models.Group'
        type: object
    type: object
  groups.destroyResponse:
    properties:
      group:
        type: string
    type: object
  groups.indexResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      total:
        type: integer
    type: object
  groups.showResponse:
    properties:
      group:
        $ref: '#/definitions/models.Group'
        type: object
    type: object
  groups.updateResponse:
    properties:
      group:
        $ref: '#/definitions/models.Group'
        type: object
    type: object
  groups.userModificationRequest:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  groups.usersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Group:
    properties:
      created_at:
        type: string
      description:
        type: string
      groupname:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Node:
    properties:
      created_at:
        type: string
      current_traffic:
        type: integer
      description:
        type: string
      hasMultiPort:
        type: boolean
      hasUDP:
        type: boolean
      host:
        description: The Host to access v2ray
        type: string
      id:
        type: integer
      listen:
        type: string
      max_traffic:
        type: integer
      name:
        type: string
      port:
        type: integer
      ports:
        type: string
      protocol:
        type: string
      updated_at:
        type: string
    type: object
  models.Service:
    properties:
      alterid:
        type: integer
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      host:
        type: string
      id:
        type: integer
      name:
        type: string
      nid:
        type: integer
      port:
        type: integer
      protocol:
        type: string
      security:
        type: string
      uid:
        type: integer
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      current_traffic:
        type: integer
      email:
        type: string
      id:
        type: integer
      max_traffic:
        type: integer
      subscription_token:
        type: string
      updated_at:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  nodes.accessTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  nodes.createResponse:
    properties:
      node:
        $ref: '#/definitions/models.Node'
        type: object
    type: object
  nodes.destroyResponse:
    properties:
      node:
        type: string
    type: object
  nodes.indexResponse:
    properties:
      nodes:
        items:
          $ref: '#/definitions/models.Node'
        type: array
      total:
        type: integer
    type: object
  nodes.servicesResponse:
    properties:
      services:
        items:
          $ref: '#/definitions/models.Service'
        type: array
      total:
        type: integer
    type: object
  nodes.showResponse:
    properties:
      node:
        $ref: '#/definitions/models.Node'
        type: object
    type: object
  nodes.updateResponse:
    properties:
      node:
        $ref: '#/definitions/models.Node'
        type: object
    type: object
  nodes.usersResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  users.destroyResponse:
    properties:
      user:
        type: string
    type: object
  users.groupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
    type: object
  users.indexResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  users.nodesResponse:
    properties:
      nodes:
        items:
          $ref: '#/definitions/models.Node'
        type: array
    type: object
  users.servicesResponse:
    properties:
      services:
        items:
          $ref: '#/definitions/models.Service'
        type: array
    type: object
  users.showResponse:
    properties:
      user:
        $ref: '#/definitions/models.User'
        type: object
    type: object
  users.updateResponse:
    properties:
      user:
        $ref: '#/definitions/models.User'
        type: object
    type: object
host: localhost
info:
  contact: {}
  description: A Swagger UI For RayDash API
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html
  title: RayDash API
  version: 1.0.0
paths:
  /groups:
    get:
      consumes:
      - application/json
      description: Simply list out all groups
      operationId: groups.Index
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.indexResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: All Groups
      tags:
      - Groups
    post:
      consumes:
      - application/json
      description: Create a group
      operationId: groups.Create
      parameters:
      - description: Group Object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/models.Group'
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.createResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Group
      tags:
      - Groups
  /groups/{gid}:
    delete:
      consumes:
      - application/json
      description: Destroy Group according to gid
      operationId: groups.Destroy
      parameters:
      - description: Group ID
        in: path
        name: gid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.destroyResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Destroy Group
      tags:
      - Groups
    get:
      consumes:
      - application/json
      description: Show Group according to gid
      operationId: groups.Show
      parameters:
      - description: Group ID
        in: path
        name: gid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.showResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Show Group
      tags:
      - Groups
    patch:
      consumes:
      - application/json
      description: Update a group
      operationId: groups.Update
      parameters:
      - description: Group ID
        in: path
        name: gid
        required: true
        type: integer
      - description: Group Object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/models.Group'
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.updateResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Group
      tags:
      - Groups
  /groups/{gid}/users:
    get:
      consumes:
      - application/json
      description: Simply list out all users belong to a certain group
      operationId: groups.Users
      parameters:
      - description: Group ID
        in: path
        name: gid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.usersResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Group Users
      tags:
      - Groups
    patch:
      consumes:
      - application/json
      description: Add a user to a group
      operationId: groups.AppendUser
      parameters:
      - description: Username
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/groups.userModificationRequest'
      - description: Group ID
        in: path
        name: gid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.usersResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Append User
      tags:
      - Groups
  /groups/{gid}/users/{username}:
    delete:
      consumes:
      - application/json
      description: Remove a user from a group
      operationId: groups.RemoveUser
      parameters:
      - description: Group ID
        in: path
        name: gid
        required: true
        type: integer
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.usersResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Remove User
      tags:
      - Groups
  /nodes:
    get:
      consumes:
      - application/json
      description: Simply list out all Nodes
      operationId: Nodes.Index
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.indexResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: All Nodes
      tags:
      - Nodes
    post:
      consumes:
      - application/json
      description: Create node from post json object
      operationId: Nodes.Create
      parameters:
      - description: Node Object
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/models.Node'
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.createResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Node
      tags:
      - Nodes
  /nodes/{nid}:
    delete:
      consumes:
      - application/json
      description: Destroy Node according to nid
      operationId: Nodes.Destroy
      parameters:
      - description: Node ID
        in: path
        name: nid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.destroyResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Destroy Node
      tags:
      - Nodes
    get:
      consumes:
      - application/json
      description: Show Node according to nid
      operationId: Nodes.Show
      parameters:
      - description: Node ID
        in: path
        name: nid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.showResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Show Node
      tags:
      - Nodes
    patch:
      consumes:
      - application/json
      description: Update a Node
      operationId: Nodes.Update
      parameters:
      - description: Node ID
        in: path
        name: nid
        required: true
        type: integer
      - description: Node Object
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/models.Node'
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.updateResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Node
      tags:
      - Nodes
  /nodes/{nid}/services:
    get:
      consumes:
      - application/json
      description: Show services of a node
      operationId: Nodes.Services
      parameters:
      - description: Node ID
        in: path
        name: nid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.servicesResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Node Services
      tags:
      - Nodes
  /nodes/{nid}/token:
    get:
      consumes:
      - application/json
      description: Node AccessToken according to nid
      operationId: Nodes.AccessToken
      parameters:
      - description: Node ID
        in: path
        name: nid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.accessTokenResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Node AccessToken
      tags:
      - Nodes
  /nodes/{nid}/users:
    get:
      consumes:
      - application/json
      description: Show Users of a node
      operationId: Nodes.Users
      parameters:
      - description: Node ID
        in: path
        name: nid
        required: true
        type: integer
      - description: Access Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/nodes.usersResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Node Users
      tags:
      - Nodes
  /users:
    get:
      consumes:
      - application/json
      description: Simply list out all users
      operationId: users.Index
      parameters:
      - description: Group ID
        in: query
        name: gid
        type: integer
      - description: Node Token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.indexResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: All Users
      tags:
      - Users
  /users/{username}:
    delete:
      consumes:
      - application/json
      description: Delete a user according to username
      operationId: users.Destroy
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Node Token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.destroyResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Return user according to username in url
      operationId: users.Show
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Node Token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.showResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Show the required user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update the user provided
      operationId: users.Update
      parameters:
      - description: User Object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Node Token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.updateResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - Users
  /users/{username}/groups:
    get:
      consumes:
      - application/json
      description: Return a list of groups of a user
      operationId: users.Groups
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Node Token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.groupsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all groups
      tags:
      - Users
  /users/{username}/nodes:
    get:
      consumes:
      - application/json
      description: Return a list of nodes of a user
      operationId: users.Nodes
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Node Token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.nodesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all nodes
      tags:
      - Users
  /users/{username}/services:
    get:
      consumes:
      - application/json
      description: Return a list of services of a user
      operationId: users.Services
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Node Token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.servicesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all services
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
